// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimesServiceClient is the client API for PrimesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimesServiceClient interface {
	// Server streaming
	GetAllPrimes(ctx context.Context, in *PrimesRequest, opts ...grpc.CallOption) (PrimesService_GetAllPrimesClient, error)
	// Client streaming
	GetWholeSentenceFromBrokenWords(ctx context.Context, opts ...grpc.CallOption) (PrimesService_GetWholeSentenceFromBrokenWordsClient, error)
	// Bi-directional streaming
	GetCurrentMaximum(ctx context.Context, opts ...grpc.CallOption) (PrimesService_GetCurrentMaximumClient, error)
	// Unary streaming
	Sqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error)
}

type primesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimesServiceClient(cc grpc.ClientConnInterface) PrimesServiceClient {
	return &primesServiceClient{cc}
}

func (c *primesServiceClient) GetAllPrimes(ctx context.Context, in *PrimesRequest, opts ...grpc.CallOption) (PrimesService_GetAllPrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimesService_ServiceDesc.Streams[0], "/stream.PrimesService/GetAllPrimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &primesServiceGetAllPrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimesService_GetAllPrimesClient interface {
	Recv() (*PrimesResponse, error)
	grpc.ClientStream
}

type primesServiceGetAllPrimesClient struct {
	grpc.ClientStream
}

func (x *primesServiceGetAllPrimesClient) Recv() (*PrimesResponse, error) {
	m := new(PrimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *primesServiceClient) GetWholeSentenceFromBrokenWords(ctx context.Context, opts ...grpc.CallOption) (PrimesService_GetWholeSentenceFromBrokenWordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimesService_ServiceDesc.Streams[1], "/stream.PrimesService/GetWholeSentenceFromBrokenWords", opts...)
	if err != nil {
		return nil, err
	}
	x := &primesServiceGetWholeSentenceFromBrokenWordsClient{stream}
	return x, nil
}

type PrimesService_GetWholeSentenceFromBrokenWordsClient interface {
	Send(*WordRequest) error
	CloseAndRecv() (*SentenceResponse, error)
	grpc.ClientStream
}

type primesServiceGetWholeSentenceFromBrokenWordsClient struct {
	grpc.ClientStream
}

func (x *primesServiceGetWholeSentenceFromBrokenWordsClient) Send(m *WordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *primesServiceGetWholeSentenceFromBrokenWordsClient) CloseAndRecv() (*SentenceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SentenceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *primesServiceClient) GetCurrentMaximum(ctx context.Context, opts ...grpc.CallOption) (PrimesService_GetCurrentMaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimesService_ServiceDesc.Streams[2], "/stream.PrimesService/GetCurrentMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &primesServiceGetCurrentMaximumClient{stream}
	return x, nil
}

type PrimesService_GetCurrentMaximumClient interface {
	Send(*MaximumRequest) error
	Recv() (*MaximumResponse, error)
	grpc.ClientStream
}

type primesServiceGetCurrentMaximumClient struct {
	grpc.ClientStream
}

func (x *primesServiceGetCurrentMaximumClient) Send(m *MaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *primesServiceGetCurrentMaximumClient) Recv() (*MaximumResponse, error) {
	m := new(MaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *primesServiceClient) Sqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error) {
	out := new(SqrtResponse)
	err := c.cc.Invoke(ctx, "/stream.PrimesService/Sqrt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimesServiceServer is the server API for PrimesService service.
// All implementations must embed UnimplementedPrimesServiceServer
// for forward compatibility
type PrimesServiceServer interface {
	// Server streaming
	GetAllPrimes(*PrimesRequest, PrimesService_GetAllPrimesServer) error
	// Client streaming
	GetWholeSentenceFromBrokenWords(PrimesService_GetWholeSentenceFromBrokenWordsServer) error
	// Bi-directional streaming
	GetCurrentMaximum(PrimesService_GetCurrentMaximumServer) error
	// Unary streaming
	Sqrt(context.Context, *SqrtRequest) (*SqrtResponse, error)
	mustEmbedUnimplementedPrimesServiceServer()
}

// UnimplementedPrimesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimesServiceServer struct {
}

func (UnimplementedPrimesServiceServer) GetAllPrimes(*PrimesRequest, PrimesService_GetAllPrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPrimes not implemented")
}
func (UnimplementedPrimesServiceServer) GetWholeSentenceFromBrokenWords(PrimesService_GetWholeSentenceFromBrokenWordsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWholeSentenceFromBrokenWords not implemented")
}
func (UnimplementedPrimesServiceServer) GetCurrentMaximum(PrimesService_GetCurrentMaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCurrentMaximum not implemented")
}
func (UnimplementedPrimesServiceServer) Sqrt(context.Context, *SqrtRequest) (*SqrtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}
func (UnimplementedPrimesServiceServer) mustEmbedUnimplementedPrimesServiceServer() {}

// UnsafePrimesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimesServiceServer will
// result in compilation errors.
type UnsafePrimesServiceServer interface {
	mustEmbedUnimplementedPrimesServiceServer()
}

func RegisterPrimesServiceServer(s grpc.ServiceRegistrar, srv PrimesServiceServer) {
	s.RegisterService(&PrimesService_ServiceDesc, srv)
}

func _PrimesService_GetAllPrimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimesServiceServer).GetAllPrimes(m, &primesServiceGetAllPrimesServer{stream})
}

type PrimesService_GetAllPrimesServer interface {
	Send(*PrimesResponse) error
	grpc.ServerStream
}

type primesServiceGetAllPrimesServer struct {
	grpc.ServerStream
}

func (x *primesServiceGetAllPrimesServer) Send(m *PrimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PrimesService_GetWholeSentenceFromBrokenWords_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrimesServiceServer).GetWholeSentenceFromBrokenWords(&primesServiceGetWholeSentenceFromBrokenWordsServer{stream})
}

type PrimesService_GetWholeSentenceFromBrokenWordsServer interface {
	SendAndClose(*SentenceResponse) error
	Recv() (*WordRequest, error)
	grpc.ServerStream
}

type primesServiceGetWholeSentenceFromBrokenWordsServer struct {
	grpc.ServerStream
}

func (x *primesServiceGetWholeSentenceFromBrokenWordsServer) SendAndClose(m *SentenceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *primesServiceGetWholeSentenceFromBrokenWordsServer) Recv() (*WordRequest, error) {
	m := new(WordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrimesService_GetCurrentMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrimesServiceServer).GetCurrentMaximum(&primesServiceGetCurrentMaximumServer{stream})
}

type PrimesService_GetCurrentMaximumServer interface {
	Send(*MaximumResponse) error
	Recv() (*MaximumRequest, error)
	grpc.ServerStream
}

type primesServiceGetCurrentMaximumServer struct {
	grpc.ServerStream
}

func (x *primesServiceGetCurrentMaximumServer) Send(m *MaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *primesServiceGetCurrentMaximumServer) Recv() (*MaximumRequest, error) {
	m := new(MaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrimesService_Sqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqrtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimesServiceServer).Sqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.PrimesService/Sqrt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimesServiceServer).Sqrt(ctx, req.(*SqrtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrimesService_ServiceDesc is the grpc.ServiceDesc for PrimesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.PrimesService",
	HandlerType: (*PrimesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sqrt",
			Handler:    _PrimesService_Sqrt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPrimes",
			Handler:       _PrimesService_GetAllPrimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetWholeSentenceFromBrokenWords",
			Handler:       _PrimesService_GetWholeSentenceFromBrokenWords_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCurrentMaximum",
			Handler:       _PrimesService_GetCurrentMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
